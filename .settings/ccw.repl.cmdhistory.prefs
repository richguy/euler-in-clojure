cmdhistory=["(+ 4 5)" "(main)" "(-main)" "('main)" "(-main hi)" "(-main [1])" "(main 3)" "(testlein.core/main 3)" "(ns testlein.core)" "(test 3)" "(mod 20 3)" "(mod 20 5)" "(\=\=(mod 20 5) 0)" ";; Switching to euler1 namespace" "(div-by3or5 20)" "\:his" "(div-by3or5 19)" "(range 10)" "(filter div-by3or5 (range 10))" "(euler1 100)" "(euler1 1000)" "(concat 4 [5 6])" "(concat 5 6)" "(take 10 (lazy-seq-fibo))" ";; Switching to testlein.euler2 namespace" "(take 10 (lazy-seq-fibo))" "(take-while less-than-4MM (lazy-se-fibo))" "(take 10 lazy-seq-fibo)" ";; Switching to testlein.euler2 namespace" "(take 10 lazy-seq-fibo)" "(take 10 (lazy-seq-fibo)\\n      )" "(take-while less-than-4MM (lazy-seq-fibo))" "(filter even? (take-while less-than-4MM (lazy-seq-fibo)))" "(reduce + (filter even? (take-while less-than-4MM (lazy-seq-fibo))))" "(fn2)" "(ns testlein.euler2)" "(fn2)" "(str 68857)" "(ispalindrome? 1001)" "(print candstr)" "(def x \\"1001\\")" "(subs x (+ 1 (/ 4 2)\\n           \\n          \\n           \\n    \\n           \\n           (bigpal 99)" "(bigpal 99)" "(bigpal 999)" "(bigpal 99)" "(bigpal 99 99)" "(recur (dec a))" "(bigpal 99 99)" "(bigpal 100 100)" "\=> (bigpal 100 100)" "(bigpal 99 99)" "(bigpal 999 999)" "(bigpal 99 99)" "(9)" "9" "(bigpal 99 99)" "(bigpal 999 999)" "(bigpal)" "(gcd 20 10)" "(gcd 48 180)" "(lcm 50 100)" "(reduce \#(lcm %1 %2) (range 1 21))" "(reduce \#(+ %1 (expt %2 2)) (range 1 5)\\n        )" "(reduce \#(+ %1 (Math/exp %2 2)) (range 1 5))" "(Math/exp 1 2)" "(Math/expt 1 2)" "(\:require [clojure.math.numeric-tower \:as math])" ";; Switching to euler6 namespace" "(reduce \#(%1 (expt %2 2)) (range 1 5))" "(reduce \#(%1 (math/expt %2 2)) (range 1 5))" "(math/expt (reduce + (range 1 11)) 2)" "(ns euler6\\n  (\:require [clojure.math.numeric-tower \:as math]))" "(math/expt (reduce + (range 1 11)) 2)" "(iterate inc 2)" ";; Switching to euler namespace" ";; Switching to euler7 namespace" "(repeat 10 inc)" "(repeat 10 inc 1)" "(repeat 10 (inc 1))" "(range 1000)" "(def x (range 1000))" "x" "(cons x)" "(cons (first x) x)" "x" "(def x range 2 1000)" "(def x (range 2 1000))" "(reverse x)" "(filter \#(\!\= (mod %1 (first x)) 0)\\n        (rest x))" "(filter \#(not\= (mod %1 (first x)) 0)\\n        (rest x))" "(sieveofe (range 2 1000))" "(take 10 (sieveofe (range 2 1000)))" "(take 10001 (sieveofe (iterate inc 2)))" "(take 100 (sieveofe (iterate inc 2)))" "(take 1000 (sieveofe (iterate inc 2)))" "(take 5000 (sieveofe (iterate inc 2)))" ";; Switching to testlein.lazyprimes namespace" "(take 20 (sieve (iterate inc 2)))" "(take 10001 (sieve (iterate inc 2)))" "(import 'java.lang.Runtime) \\n(.maxMemory (Runtime/getRuntime))" ";; Switching to testlein.lazyprimes namespace" "(take 20 (sieve (iterate inc 2)))" "(take 2000 (sieve (iterate inc 2)))" "(take 100 prime-seq)" ";; Switching to euler7 namespace" "(take 100 prime-seq)" "(take 100 (prime-seq))" "(nth (prime-seq) 100)" "(nth (prime-seq) 10001)" "(sieve 1001)" "(sieve 10001)" "(sieve 2000)" "(sieve 10001)" "(take 2000 (sieveofe (iterate inc 2)))" ";; Switching to testlein.lazyprimes3 namespace" "(take 100 lazy-primes3)" "(take 100 (lazy-primes3))" "(largest-prod)" "(ns testlein.euler8)" "(largest-prod)" "(def test \\"73167176531330624919225119674426574742355349194934\\")" "(def testn \\"73167176531330624919225119674426574742355349194934\\")" "(str testn)" "(int (subs testn 0 0))" "(int (char (subs testn 0 0)))" "(subs testn 0 0)" "(subs testn 0 1)" "(int (subs testn 0 1))" "(int (char (subs testn 0 1)))" "(re-seq \#\\"\\\\d\\" testn)" "(read-string (subs testn 0 1))" "(* (read-string (subs testn 0 1))\\n   (read-string (subs testn 1 2))\\n   (read-string (subs testn 2 3))\\n   (read-string (subs testn 3 4))\\n   (read-string (subs testn 4 5)))" "\\n(read-string (subs testn 0 1))\\n   (read-string (subs testn 1 2))\\n   (read-string (subs testn 2 3))\\n   (read-string (subs testn 3 4))\\n   (read-string (subs testn 4 5))" "(testnum \\"73167176531330624919225119674426574742355349194934\\")" "(def testnum \\"73167176531330624919225119674426574742355349194934\\")" "(count testnum)" "(subs testnum 45 50)" "(subs testnum 0 1)" "(subs testnum 45 51)" "(subs testnum 45 50)" "(partition 5 1 testnum)" "(apply + (partition 5 1 testnum))" "(map \#(Integer/parseInt (str %) (partition 5 1 testnum))\\n     )" "(map \#(Integer/parseInt (str %)) (partition 5 1 testnum))" "(read-string (partition 5 1 testnum))" "(map \#(Integer/parseInt (str %)) (partition 5 1 testnum))" "(read-string (partition 5 1 testnum))" "(partition 5 1 testnum)" "testnum" "(map \#(Character/getNumericValue (str %)) (partition 5 1 testnum))" "(Character/getNumericValue \\"6\\")" "(map \#(Integer/parseInt (str %)) (partition 5 1 testnum))" ";; Switching to testlein.euler9 namespace" "(combo/combinations [1 2 3] 2)" "(combo/combinations (range 1 10) 2)" "(combo/combinations (range 1 500) 2)" "(combo/combinations (range 1 500) 3)" ";; Switching to testlein.lazyprimes3 namespace" "(testlein.lazyprimes3 2000000)" "(lazy-primes3 2000000)" ";; Switching to testlein.lazyprimes3 namespace" "(lazy-primes3 2000000)" "(take-while (< 2000000 %) lazy-primes3)" "(take-while \#(< 2000000 %) lazy-primes3)" "(take-while \#(< % 2000000) lazy-primes3)" "(lazy-primes3)" "(take 20 lazy-primes3)" "(nth (lazy-primes-3) 10000)" "(nth (lazy-primes3) 10000)" "(take 20 (lazy-primes3))" "(take 2000000 (lazy-primes3))" "(reduce + (take 2000000 (lazy-primes3)))" "(reduce + (take-while \#(< % 2000000 (iterate lazy-primes3))))" "(reduce + (take-while \#(< % 2000000) (iterate lazy-primes3)))" "(reduce + (take-while \#(< % 2000000) (lazy-primes3)))" "x" "(x)" ";; Switching to testlein.euler11 namespace" "(x)" "(print x)" "(seq x)" "(split x /s)" "(split x \#\\"\\\\s\\")" "(test)" ";; Switching to testlein.euler11 namespace" "(def gm \\"08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\\n32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\\n67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\\n24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\\n21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\\")" "gm" "(def gv (char2ints (parse gm)))" "(count gm)" "gmgggg" "key" "do" ";; Switching to testlein.euler14 namespace" "(def t [14])" "t" "(first t)" "(last t)" "(/ (last t) 2)" "(\= (last n) 1)" "(\= (last x) 1)" "(even? (last x))" "(conj n (* 3 last n))" "(conj x (* 3 last x))" "(conj x (* 3 (last x)))" "(conj x (int 1))" "x" "(def x [1 2 3 4 5 6 7])" "x" "(range 1 10\\n       )" "(map into [] (range 1 10))" ";; Switching to testlein.euler14 namespace" "\u00DF" "fn?" "9" ";; Switching to testlein.euler14c namespace" "(lazy-collatz 13)" "(next-collatz 13)" "(next-collatz 40)" "(next-collatz 20)" ";; Switching to testlein.euler14b namespace" "(collatz 13)" ";; Switching to testlein.euler14c namespace" "(collatz 13)" "(collatz [13])" "(find [\:a \:b \:c \:d] 2)" "(val(find [\:a \:b \:c \:d] 2))" "(find {\:b 2 \:a 1 \:c 3} \:a)" "(val(find {\:b 2 \:a 1 \:c 3} \:a))" ";; Switching to testlein.euler14 namespace" ";; Switching to testlein.euler14c namespace" "(iterate next-collatz 3)" "(iterate (next-collatz %) 3)" ";; Switching to testlein.euler14c namespace" ";; Switching to testlein.euler14b namespace" "(factorial 20)" "(time (factorial 20\\n                ))" "(time (factorial 20000\\n                ))" "(time (factorial 20000))" "(time (factorial 2000000\\n                 ))" "(time (factorial 2000))" "(time (factorial 20000))" "(time (factorial 200000))" "(time (factorial 20))" "(ns testlein.euler15)" "(combination 40 20)" "(cl-format -r 100)" "(cl-format true -r 100)" "(cl-format true \\"-r \\" 100)" "(cl-format nil \\"-r \\" 100)" "(cl-format nil \\"~5d\\" 3)" ";; Switching to testlein.euler16 namespace" "(cl-format nil \\"~5d\\" 3)" "(pprint \\"hi\\")" "pprint" ";; Switching to testlein.euler16 namespace" "(pprint \\"hi\\")" "(cl-format nil \\"~5d\\" 3)" "(clojure.pprint/cl-format nil \\"~5d\\" 3)" "(clojure.pprint/cl-format nil \\"-r \\" 100)" "(clojure.pprint/cl-format nil \\"~r\\" 100)" "(clojure.pprint/cl-format nil \\"~r\\" 132)" "(clojure.pprint/cl-format nil \\"~r\\" 13\\n                          )" "(count-letters 1 20)" "(count-letters)" "(apply \#(clojure.pprint/cl-format nil \\"~r\\" %) (range 1 20))" "(print-letter 15)" "(print-letters 15)" "(count-letters)" "(count-letters 50)" ";; Switching to testlein.euler16 namespace" "(count-letters 50)" "(count-letters 20)" ";; Switching to testlein.euler16 namespace" "(count-letters 20)" ";; Switching to testlein.euler16 namespace" "(count-letters 20)" "(count-letters 120)" "(count-letters 5)" "(count-letters 1000)" "(show-letters 1000)" "(count-letters 1000)" "(print x)" ";; Switching to euler17 namespace" "(print x)" "(split x)" "(clojure.string/split x)" "(partition 2 1 [4 62 98 27 23 9 70 98 73 93 38 53 60 4 23])" "(apply max % (partition 2 1 [4 62 98 27 23 9 70 98 73 93 38 53 60 4 23])[91 71 52 38 17 14 91 43 58 50 27 29 48])" "(def a [63 66 4 68 89 53 67 30 73 16 69 87 40 31] [4 62 98 27 23 9 70 98 73 93 38 53 60 4 23])" "(def a [4 62 98 27 23 9 70 98 73 93 38 53 60 4 23])" "(def b [63 66 4 68 89 53 67 30 73 16 69 87 40 31] )" "(partion 2 1 a)" "(partition 2 1 a)" "(map \#(apply max %) (partition 2 1 a))" "a" "b" "(partition 2 1 a)" "(slurp \\"/Users/rich/dev/euler-in-clojure/src/triangle.txt\\")" "(factorial 100)" ";; Switching to all-euler namespace" "(factorial 100)" "(split (factorial 100))" "(seq (factorial 100))" "(seq (str (factorial 100)))" "(map \#(Integer/parseInt (str %)(seq (str (factorial 100)))))" "(map \#(Integer/parseInt (str %))(seq (str (factorial 100))))" "(reduce + (map \#(Integer/parseInt (str %))(seq (str (factorial 100)))))" "(factorial 100)" "(euler20)" ";; Switching to all-euler-1-20 namespace" "(euler20)" "(factorial 100)" "(apply str (factorial 100))" "(str (factorial 100))" "(range 220)" "(range (+ 1 220))" "(filter \#(\= 0 (mod 220 %)) (range (+ 1 220)))" "(filter \#(\= 0 (mod 220 %)) (range 1 (+ 1 220)))" "(reduce + (filter \#(\= 0 (mod 220 %)) (range 1 (+ 1 220))))" "(reduce + (filter \#(\= 0 (mod 220 %)) (range 1 (+ 2 220))))" "(reduce + (filter \#(\= 0 (mod 220 %)) (range 2 (+ 1 220))))" "(reduce + (filter \#(\= 0 (mod 220 %)) (range 2 (111))))" "(reduce + (filter \#(\= 0 (mod 220 %)) (range 2 111)))" "(reduce + (filter \#(\= 0 (mod 220 %)) (range 1 111)))" ";; Switching to all-euler-1-20 namespace" "(quot (+ 220 1) 2)" "(quot 4 2)" ";; Switching to all-euler-1-20 namespace" "(+ 1 2)" ";; Switching to all-euler-1-20 namespace" "(+ 1 2)" "(quot 220 2)" "(quot (+ 1 220) 2)" "(range 1 (quot (+ 1 220) 2))" "(filter \#(\= 0 (mod % 220)) (range 1 (quot (+ 1 220) 2)))" "(filter \#(\= 0 (mod 220 $)) (range 1 (quot (+ 1 220) 2)))" "(filter \#(\= 0 (mod 220 %)) (range 1 (quot (+ 1 220) 2)))" "(filter \#(\= 0 (mod 220 %)) (range 1 (+ 1(quot 220 2))))" "(reduce + (filter \#(\= 0 (mod 220 %)) (range 1 (+ 1(quot 220 2)))))" "(sum-prop-div (sum-prop-div 220))" ";; Switching to all-euler-1-20 namespace" "(sum-prop-div (sum-prop-div 220))" "(range 1 1001)" "(filter \#(amicable? %) (range 1 1001))" "(amicable? 220)" "(sum-prop-div 220)" "(sum-prop-div 284)" "(sum-prop-div 6)" "(sum-prop-div 25)" "(sum-prop-div 28)" "(apply \#(amicable? %) (range 1 1001))" "(map \#(amicable? %) (range 1 1001))" "(sum-prop-div 220)" "(sum-prop-div(sum-prop-div 220))" "(filter \#(amicable? %) (range 1 1001))" "(reduce + (filter \#(amicable? %) (range 1 1001)))" "(euler21 1000)" "(euler21 10000)" "(filter \#(amicable? %) (range 1 1000))" "(sum-prop-div 496)" "(filter \#(amicable? %) (range 1 1000))" "(filter \#(amicable? %) (range 1 10000))" "(euler21 10000)" "(slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")" "(split (slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\") \\",\\")" "(split (slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\") \#\\",\\")" "(slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")" "(clojure.string/replace (slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\") \#\\"\\\\|\\\\\\"|\\\\\\\\\\")" "(clojure.string/replace (slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\") \#\\"\\\\|\\\\\\"|\\\\\\\\\\" \\"\\")" "(slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")" "(str (slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\"))" "(seq (slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\"))" "(clojure.string/replace (slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\") \#\\"\\\\|\\\\\\"|\\\\\\\\\\" \\"\\")" "(with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr)))" "(first (with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr))))" "(clojure.string/replace (first (with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr)))) \#\\"\\\\\\"\\" \\"\\")" "(split (clojure.string/replace (first (with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr)))) \#\\"\\\\\\"\\" \\"\\") \#\\",\\")" "(clojure.string/replace (first (with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr)))) \#\\"\\\\\\"\\" \\"\\")" "(split (clojure.string/replace (first (with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr)))) \#\\"\\\\\\"\\" \\"\\") \#\\",\\")" "(sort (split (clojure.string/replace (first (with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr)))) \#\\"\\\\\\"\\" \\"\\") \#\\",\\"))" "(length (sort (split (clojure.string/replace (first (with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr)))) \#\\"\\\\\\"\\" \\"\\") \#\\",\\")))" "(sort (split (clojure.string/replace (first (with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr)))) \#\\"\\\\\\"\\" \\"\\") \#\\",\\"))" "(count (sort (split (clojure.string/replace (first (with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr)))) \#\\"\\\\\\"\\" \\"\\") \#\\",\\")))" "(sort (split (clojure.string/replace (first (with-open [rdr (clojure.java.io/reader \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")]\\n    (reduce conj [] (line-seq rdr)))) \#\\"\\\\\\"\\" \\"\\") \#\\",\\"))" "(sort (split (clojure.string/replace (first (slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")) \#\\"\\\\\\"\\" \\"\\") \#\\",\\"))" "(sort (split (clojure.string/replace (slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\") \#\\"\\\\\\"\\" \\"\\") \#\\",\\"))" "(sort (split (clojure.string/replace (first (slurp \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")) \#\\"\\\\\\"\\" \\"\\") \#\\",\\"))" "(def path \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")" "path" "(split (clojure.string/replace (slurp path) \#\\"\\\\\\"\\" \\"\\") \#\\",\\")" "(sort (split (clojure.string/replace (slurp path) \#\\"\\\\\\"\\" \\"\\") \#\\",\\"))" "(euler22 \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")" "(*1)" "(euler22 \\"/Users/rich/dev/euler-in-clojure/src/names.txt\\")" "(re-seq \#\\"[A-Z]\\" \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")" "(zipmap (re-seq \#\\"[A-Z]\\" \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\") (range 1 26))" "(zipmap (re-seq \#\\"[A-Z]\\" \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\") (range 1 27))" "(zipmap (re-seq \#\\"[A-Z]\\" \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\") (range 1 26))" "  (\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")" "(def *letters* \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")" "(def letters \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")" "(interleave letters (iterate inc 1))" "(apply hashmap (interleave letters (iterate inc 1)))" "(apply hash-map (interleave letters (iterate inc 1)))" "(interleave letters (iterate inc 1))" "(apply hash-map (interleave letters (iterate inc 1)))" "(def letter-val (apply hash-map (interleave letters (iterate inc 1))))" "(map \#(letter-val %) \\"RICHARD\\")" "(reduce + (map \#(letter-val %) \\"RICHARD\\"))" ";; Switching to all-euler-1-20 namespace" "(reduce + (map \#(letter-val %) \\"RICHARD\\"))" "(filter \#(\= 0 (mod 100 %)) (range 1 101))" "(filter \#(\= 0 (mod 28 %)) (range 1 29))" "(filter \#(\= 0 (mod 28 %)) (range 1 28))" "(clojure.core/ns all-euler-1-20)\\nnull\\n(clojure.core/ns user)" "(+ 12 2)" "(+ 1 2)" "(abundant? 28)" ";; Switching to all-euler-1-20 namespace" "(abundant? 28)" "(abundant? 12)" "(filter \#(\= 0 (mod 12 %)) (range 1 12))" "(reduce + (filter \#(\= 0 (mod 12 %)) (range 1 12)))" "(abundant? 12)" "(abundant? 28)" "(filter (abundant?) (range 1 28123))" "(filter abundant? (range 1 28123))" "(count 1*)" "(count *1)" "(time (filter abundant? (range 1 28123)))" "(reduce + (filter \#(\= 0 (mod 12 %)) (range 1 12)))" "(+ 1 2\\n   )" "(+ 1 20)" ";; Switching to all-euler-1-20 namespace" "(+ 1 2)" "(reduce + (filter \#(\= 0 (mod 12 %)) (range 1 12)))" "(abundant? 16)" "(filter \#(\= 0 (mod 16 %)) (range 1 16))" "(abundant? 16)" "(abundant? 12)" "(abundants)" "'(abundants)" "(take 10 abundants)" "(count 10 abundants)" "(count abundants)" "(sum-of-abundants? 400 abundants)" "(sum-of-abundants? 30 abundants)" "(filter \#(< 30) abundants)" "(filter \#(< 30 %) abundants)" "(filter \#(> 30 %) abundants)" "(sum-of-abundants? 30)" "(sum-of-abundants? 30 abundants)" "(filter \#(% < 30) abundants)" "(sum-of-abundants? 30 abundants)" "(take 30 abundants)" "(take 10 abundants)" "(sum-of-abundants? 30 abundants)" "(subseq abundants < i)" "(subseq abundants < 30)" "(sum-of-abundants? 30 abundants)" "(sum-of-abundants? 31 abundants)" "(not\= nil)" "(\= nil nil)" "(\= nil false)" "(filter \#(\= nil (sum-of-abundants? %)) (range 1 100))" "(filter \#(\= nil (sum-of-abundants? % abundants)) (range 1 100))" "(filter \#(\= nil (sum-of-abundants? % abundants)) (range 1 28112))" "(reduce + (filter \#(\= nil (sum-of-abundants? % abundants)) (range 1 28112)))" "(euler23)" "(reduce + (filter \#(\= nil (sum-of-abundants? % abundants)) (range 1 28112)))" "(->>(range 1 28112)\\n  (filter \#(\= nil (sum-of-abundants? % abundants)))\\n  (reduce +))" "(euler23)" ";; Switching to euler23-40 namespace" "(combo/combinations [1 2 3] 2)" "(combo/combinations [0 1 2 3 4 5 6 7 8 9] 3)" "(combo/combinations [0 1 2 3 4 5 6 7 8 9] 9)" "(combo/permutations [0 1 2 3 4 5 6 7 8 9])" "(take 100 (combo/permutations [0 1 2 3 4 5 6 7 8 9]))" "(sort (take 100 (combo/permutations [0 1 2 3 4 5 6 7 8 9])))" "(sort (take 1000000 (combo/permutations [0 1 2 3 4 5 6 7 8 9])))" "(take-nth 1000000 (combo/permutations [0 1 2 3 4 5 6 7 8 9]))"]
eclipse.preferences.version=1
